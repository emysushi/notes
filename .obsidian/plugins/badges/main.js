/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  buildPostProcessor: () => buildPostProcessor,
  default: () => BadgesPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/constants.ts
var BADGE_TYPES = [
  ["note", "Note", "lucide-pencil"],
  ["info", "Info", "lucide-info"],
  ["todo", "Todo", "lucide-check-circle-2"],
  ["abstract", "Abstract", "lucide-clipboard-list"],
  ["summary", "Summary", "lucide-clipboard-list"],
  ["tldr", "TLDR", "lucide-clipboard-list"],
  ["tip", "Tip", "lucide-flame"],
  ["hint", "Hint", "lucide-flame"],
  ["important", "Important", "lucide-flame"],
  ["success", "Success", "lucide-check"],
  ["check", "Check", "lucide-check"],
  ["done", "Done", "lucide-check"],
  ["question", "Question", "help-circle"],
  ["help", "Help", "help-circle"],
  ["faq", "FAQ", "help-circle"],
  ["warning", "Warning", "lucide-alert-triangle"],
  ["caution", "Caution", "lucide-alert-triangle"],
  ["attention", "Attention", "lucide-alert-triangle"],
  ["failure", "Failure", "lucide-x"],
  ["fail", "Fail", "lucide-x"],
  ["missing", "Missing", "lucide-x"],
  ["danger", "Danger", "lucide-zap"],
  ["error", "Error", "lucide-zap"],
  ["bug", "Bug", "lucide-bug"],
  ["example", "Example", "lucide-list"],
  ["quote", "Quote", "quote-glyph"],
  ["cite", "Cite", "quote-glyph"],
  ["power", "Power", "lucide-power"],
  ["verse", "Verse", "lucide-music"],
  ["complete", "Complete", "lucide-check-circle"],
  ["milestone", "Milestone", "lucide-milestone"],
  ["component", "Component", "lucide-toy-brick"],
  ["polish", "Polish", "lucide-car"],
  ["point", "point", "lucide-pointer"],
  ["dream", "Dream", "lucide-moon"],
  ["process", "Process", "lucide-clock"],
  ["refine", "Refine", "lucide-axe"],
  ["image", "Image", "lucide-image"],
  ["party", "Party", "lucide-party-popper"],
  ["crystallize", "Crystallize", "lucide-diamond"],
  ["definition", "Definition", "lucide-key"],
  ["mention", "Mention", "lucide-at-sign"],
  ["exclaim", "Exclaim", "lucide-megaphone"],
  ["meta", "Meta", "lucide-filter"],
  ["compute", "Compute", "lucide-hourglass"],
  ["emergency", "Emergency", "lucide-siren"],
  ["magnet", "Magnet", "lucide-magnet"],
  ["flag", "Flag", "flag"],
  ["branch", "Branch", "network"],
  ["snippet", "Snippet", "scissors"],
  ["lock", "Lock", "lock"],
  ["highlight", "Highlight", "highlighter"],
  ["clue", "Clue", "puzzle"],
  ["claim", "Claim", "anchor"],
  ["profile", "Profile", "lucide-user"],
  ["hat-tip", "Hat-tip", "hard-hat"],
  ["dig", "Dig", "shovel"],
  ["witness", "Witness", "edit-3"],
  ["notice", "Notice", "pen-tool"],
  ["attachment", "Attachment", "paperclip"],
  ["lightbulb", "Lightbulb", "lightbulb"],
  ["prohibit", "Prohibit", "ban"],
  ["stop", "Stop", "lucide-alert-octagon"],
  ["bomb", "Bomb", "lucide-bomb"],
  ["hold", "Hold", "lucide-hand"],
  ["charge", "Charge", "lucide-zap"],
  ["sprout", "Sprout", "lucide-sprout"],
  ["extract", "Extract", "lucide-hammer"],
  ["compass", "Compass", "lucide-compass"],
  ["map", "Map", "lucide-map"],
  ["expedition", "Expedition", "lucide-mountain-snow"],
  ["home", "Home", "lucide-home"],
  ["knowledge", "Knowledge", "lucide-book"],
  ["account", "Account", "open-vault"],
  ["judgment", "Judgment", "lucide-gavel"],
  ["balance", "Balance", "lucide-scale"],
  ["feast", "Feast", "lucide-grape"],
  ["gift", "Gift", "lucide-gift"],
  ["love", "Love", "lucide-heart"],
  ["specimen", "Specimen", "lucide-gem"],
  ["command", "Command", "lucide-swords"],
  ["deed", "Deed", "lucide-scroll"],
  ["honor", "Honor", "lucide-sword"],
  ["reward", "Reward", "lucide-crown"],
  ["customized", "Customized", "hash"],
  ["vault", "Vault", "vault"]
];

// src/main.ts
var BadgesPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerMarkdownPostProcessor(
      buildPostProcessor()
    );
    console.log("Badges plugin loaded");
  }
  onunload() {
    console.log("Badges plugin unloaded");
  }
};
function buildPostProcessor() {
  return (el) => {
    el.findAll("code").forEach(
      (code) => {
        let text = code.innerText.trim();
        if (text !== void 0 && text.startsWith("[!!") && text.endsWith("]")) {
          let part = text.substring(2);
          let content = part.substring(part.length - 1, 1).trim();
          let parts = content.split(":");
          if (parts.length < 2) {
            return;
          }
          let badgeType = parts[0].trim();
          let extras = badgeType.split("|");
          let hasExtra = extras.length > 1;
          let badgeContent = parts[1].trim();
          let newEl = document.createElement("span");
          let iconEl = document.createElement("span");
          let titleEl = document.createElement("span");
          let textEl = document.createElement("span");
          let attrType = "";
          if (extras.length == 3) {
            iconEl.addClass("inline-badge-icon");
            attrType = "customized";
            (0, import_obsidian.setIcon)(iconEl, extras[1]);
            iconEl.setAttr("aria-label", extras[2]);
            let styles = parts[1].split("|");
            let title = styles[0].trim();
            let color = styles[1].trim();
            titleEl.addClass("inline-badge-title-inner");
            titleEl.setText(title);
            newEl.addClass("inline-badge");
            newEl.setAttr("data-inline-badge", attrType.toLowerCase());
            newEl.setAttr("style", "--customize-badge-color: " + color + ";");
            newEl.appendChild(iconEl);
            if (textEl.getText() != "") {
              newEl.appendChild(textEl);
            }
            newEl.appendChild(titleEl);
            attrType = extras.join("|");
          } else {
            if (hasExtra) {
              if (extras[1].startsWith("ghb>") || extras[1].startsWith("ghs>")) {
                let ghType = extras[1].split(">")[1].trim();
                (0, import_obsidian.setIcon)(iconEl, "github");
                iconEl.addClass("inline-badge-icon");
                iconEl.setAttr("aria-label", "Github");
                textEl.addClass("gh-type");
                textEl.setText(ghType);
                iconEl.appendChild(textEl);
                attrType = extras[1].startsWith("ghb>") ? "github" : "github-success";
                badgeType = extras[1].startsWith("ghb>") ? "github" : "github-success";
              } else {
                iconEl.addClass("inline-badge-extra");
                iconEl.setText(badgeType.split("|")[1].trim());
                attrType = "text";
                badgeType = "text";
              }
            } else {
              iconEl.addClass("inline-badge-icon");
              attrType = badgeType.trim();
              BADGE_TYPES.forEach((el2) => {
                if (el2.indexOf(badgeType.toLowerCase()) === 0 && el2[2].length > 0) {
                  (0, import_obsidian.setIcon)(iconEl, el2[2]);
                  iconEl.setAttr("aria-label", badgeType.trim());
                }
              });
            }
            titleEl.addClass("inline-badge-title-inner");
            titleEl.setText(badgeContent);
            newEl.addClass("inline-badge");
            newEl.setAttr("data-inline-badge", attrType.toLowerCase());
            newEl.appendChild(iconEl);
            if (textEl.getText() != "") {
              newEl.appendChild(textEl);
            }
            newEl.appendChild(titleEl);
          }
          code.replaceWith(newEl);
        }
      }
    );
  };
}
