/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => calloutIntegrator
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var calloutIntegrator = class extends import_obsidian.Plugin {
  onload() {
    function anchorhead(head, anchor) {
      if (head.line > anchor.line) {
        return true;
      } else if (head.line < anchor.line) {
        return false;
      } else {
        if (head.ch > anchor.ch) {
          return true;
        } else {
          return false;
        }
      }
    }
    this.addCommand({
      id: "callout-integrate",
      name: "integrate",
      editorCallback: (editor) => {
        let selection = editor.getSelection();
        if (editor.somethingSelected()) {
          let selectHead = editor.getCursor("head");
          let selectAnchor = editor.getCursor("anchor");
          editor.replaceSelection("> " + selection.replace(/\n/g, "\n> "));
          if (anchorhead(selectHead, selectAnchor)) {
            selectHead.ch += 2;
          } else {
            selectAnchor.ch += 2;
          }
          editor.setSelection(selectAnchor, selectHead);
        } else {
          let cursorPos = editor.getCursor();
          let currentLine = editor.getLine(cursorPos.line);
          editor.setLine(cursorPos.line, "> " + currentLine);
          cursorPos.ch += 2;
          editor.setCursor(cursorPos);
        }
      }
    });
    this.addCommand({
      id: "callout-unintegrate",
      name: "un-integrate",
      editorCallback: (editor) => {
        let selection = editor.getSelection();
        if (editor.somethingSelected()) {
          let selectHead = editor.getCursor("head");
          let selectAnchor = editor.getCursor("anchor");
          let movement = 0;
          if (selection.charAt(0) === ">") {
            selection = selection.substring(1);
            movement--;
            if (selection.charAt(0) === " ") {
              selection = selection.substring(1);
              movement--;
            }
          }
          if (anchorhead(selectHead, selectAnchor)) {
            selectHead.ch += movement;
          } else {
            selectAnchor.ch += movement;
          }
          editor.replaceSelection(selection.replace(/\n> /g, "\n"));
          editor.setSelection(selectAnchor, selectHead);
        } else {
          let cursorPos = editor.getCursor();
          let currentLine = editor.getLine(cursorPos.line);
          if (currentLine.charAt(0) === ">") {
            currentLine = currentLine.substring(1);
            cursorPos.ch--;
            if (currentLine.charAt(0) === " ") {
              currentLine = currentLine.substring(1);
              cursorPos.ch--;
            }
            editor.setLine(cursorPos.line, currentLine);
            editor.setCursor(cursorPos);
          }
        }
      }
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
